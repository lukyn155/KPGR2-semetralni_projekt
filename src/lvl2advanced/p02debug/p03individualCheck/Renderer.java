package lvl2advanced.p02debug.p03individualCheck;


import static org.lwjgl.opengl.GL11.GL_COLOR_BUFFER_BIT;
import static org.lwjgl.opengl.GL11.GL_DEPTH_BUFFER_BIT;
import static org.lwjgl.opengl.GL11.GL_TRIANGLES;
import static org.lwjgl.opengl.GL11.glClear;
import static org.lwjgl.opengl.GL11.glClearColor;
import static org.lwjgl.opengl.GL11.glViewport;
import static org.lwjgl.opengl.GL20.glGetUniformLocation;
import static org.lwjgl.opengl.GL20.glUniform1f;
import static org.lwjgl.opengl.GL20.glUseProgram;


import org.lwjgl.glfw.GLFWCursorPosCallback;
import org.lwjgl.glfw.GLFWWindowSizeCallback;

import lvl2advanced.p01gui.p01simple.AbstractRenderer;
import lwjglutils.OGLBuffers;
import lwjglutils.OGLTextRenderer;
import lwjglutils.OGLUtils;
import lwjglutils.ShaderUtils;


/**
* 
* @author PGRF FIM UHK
* @version 2.0
* @since 2019-09-02
*/
public class Renderer extends AbstractRenderer{
	
	OGLBuffers buffers;
	
	int shaderProgram, locTime;
	
	float time = 0;
	
	boolean first = true;
	boolean debug1, debug2, debug3, debug4;
	
	@Override
	public GLFWCursorPosCallback getCursorCallback() {
		return null;
	}

	private GLFWWindowSizeCallback wsCallback = new GLFWWindowSizeCallback() {
    	@Override
    	public void invoke(long window, int w, int h) {
            if (w > 0 && h > 0 && 
            		(w != width || h != height)) {
            	width = w;
            	height = h;
            	if (textRenderer != null)
            		textRenderer.resize(width, height);

            }
        }
    };
    
	@Override
	public GLFWWindowSizeCallback getWsCallback() {
		return wsCallback;
	}

	void createBuffers() {
		float[] vertexBufferData = {
			-1, -1, 	0.7f, 0, 0, 
			 1,  0,		0, 0.7f, 0,
			 0,  1,		0, 0, 0.7f 
		};
		int[] indexBufferData = { 0, 1, 2 };

		// vertex binding description, concise version
		OGLBuffers.Attrib[] attributes = {
				new OGLBuffers.Attrib("inPosition", 2), // 2 floats
				new OGLBuffers.Attrib("inColor", 3) // 3 floats
		};
		buffers = new OGLBuffers(vertexBufferData, attributes,
				indexBufferData);
	}

	
	@Override
	public void init() {
		OGLUtils.printOGLparameters();
		OGLUtils.printLWJLparameters();
		OGLUtils.printJAVAparameters();
		
		// Set the clear color
		glClearColor(0.1f, 0.1f, 0.1f, 1.0f);

		createBuffers();
		
		shaderProgram = ShaderUtils.loadProgram("/lvl2advanced/p02debug/start");
		//sample shader files with many errors - try to find and correct them
		//shaderProgram = ShaderUtils.loadProgram("/lvl2advanced/p02debug/startError"); 
		
		
		// internal OpenGL ID of a shader uniform (constant during one draw call
		// - constant value for all processed vertices or pixels) variable
		locTime = glGetUniformLocation(shaderProgram, "time");
		
		textRenderer = new OGLTextRenderer(width, height);
	}
	
	@Override
	public void display() {
		
		OGLUtils.emptyGLError();
		
		String text = "";
		
		glViewport(0, 0, width, height);
		
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // clear the framebuffer

		// set the current shader to be used, could have been done only once (in
		// init) in this sample (only one shader used)
		
		time += 0.1;
		
		//ERROR - GL_INVALID_OPERATION, no active program 
		glUniform1f(locTime, time); // correct shader must be set before this
		
		if (first)
			OGLUtils.checkGLError("[OpenGL] after setting uniform variable: " + this.getClass().getName() + "." +
						Thread.currentThread().getStackTrace()[1].getMethodName(), true);
		
		//ERROR - GL_INVALID_VALUE, handle does not refer to an object generated by OpenGL 
		glUseProgram(10); 
		
		//checking GLErrors 
		if (first)
			OGLUtils.checkGLError("[OpenGL] after setting shader program: " + this.getClass().getName() + "." +
						Thread.currentThread().getStackTrace()[1].getMethodName(), true);
		
		
		glUseProgram(shaderProgram); 
		
		// bind and draw
		buffers.draw(GL_TRIANGLES, shaderProgram);
		
		//for error print repeating elimination 
		//first = false;
		
		textRenderer.clear();
		textRenderer.addStr2D(3, 20, text);
		textRenderer.addStr2D(width-90, height-3, " (c) PGRF UHK");
		textRenderer.draw();
	}
}